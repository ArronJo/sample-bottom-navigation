plugins {
    id 'com.android.application'
}

android {
    compileSdkVersion 30
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.snc.sample.bottom_navigation"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        ndk {
            abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"    // arm 시리즈만 포함
        }

        buildConfigField "boolean", "FEATURE_SPLASH", "false"
        buildConfigField "boolean", "FEATURE_ONBOARDING", "true"
        buildConfigField "boolean", "FEATURE_COACH", "true"

    }
    signingConfigs {
        storeFile {
            //storeFile file('./keystore/upload_keystore.jks')
            //storePassword '<password>'
            //keyAlias '<alias>'
            //keyPassword '<password>'

            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    dexOptions {
        preDexLibraries false
        additionalParameters "--multi-dex", "--set-max-idx-number", "65000"
    }
    buildTypes {
        release {
            //signingConfig signingConfigs.storeFile
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            //signingConfig signingConfigs.storeFile
        }
    }
    flavorDimensions "version"
    productFlavors {
        free {
            dimension "version"
            manifestPlaceholders = [ applicationLabel: "@string/app_name" ]
        }
    }
    sourceSets {
        main {
            res.srcDirs = ['src/main/res']
            assets.srcDirs = ['src/main/assets']
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/ASL2.0'

        doNotStrip "*/armeabi/*.so"
        doNotStrip "*/armeabi-v7a/*.so"
        doNotStrip "*/arm64-v8a/*.so"
        doNotStrip '*/mips/*.so'
        doNotStrip '*/mips64/*.so'
        doNotStrip "*/x86/*.so"
        doNotStrip "*/x86_64/*.so"
    }
    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    testImplementation 'junit:junit:4.13.2'
    //noinspection GradleCompatible
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'com.google.android.material:material:1.3.0'

    implementation "androidx.multidex:multidex:2.0.1"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation group: 'androidx.core', name: 'core', version: '1.6.0-alpha03'

    // androidx.fragment.app.FragmentContainerView
    implementation 'androidx.fragment:fragment:1.3.3'

    // runtime permission library
    implementation 'gun0912.ted:tedpermission:2.2.3'

    // androidx.webkit.WebViewAssetLoader
    implementation "androidx.webkit:webkit:1.4.0"

    // androidx.security.crypto.EncryptedSharedPreferences
    implementation 'androidx.security:security-crypto:1.1.0-alpha03'
    implementation "androidx.security:security-identity-credential:1.0.0-alpha02"
    implementation('com.google.crypto.tink:tink-android') {
        version {
            strictly '1.4.0'
        }
    }

    //////////////////////////////////////////////
    // [ 3rd-party ]

    // lottie
    // http://airbnb.io/lottie/#/android
    // https://github.com/airbnb/lottie-android
    implementation 'com.airbnb.android:lottie:3.6.1'
}

android.applicationVariants.all { variant ->
    variant.outputs.all { output ->
        def flavor = variant.productFlavors[0]
        def newApkName = variant.applicationId
        newApkName += "_" + flavor.name
        newApkName += "_" + variant.buildType.name
        newApkName += "_v" + variant.versionName
        newApkName += "_r" + variant.versionCode
        newApkName += "_" + "${getDate()}" + ".apk"

        outputFileName = new File(newApkName)

        println ''
        println ''
        println 'Rename outputFile : ' + newApkName
        println ''
        println ''
    }
}

static def getDate() {
    return new Date().format('yyyyMMdd_HHmm')
}

android.applicationVariants.all { variant ->
    variant.assembleProvider.configure {
        doLast {
            println "\n\n"
            println "###########################################"
            println "#                                         #"
            println "#       ######    ##     #     ######     #"
            println "#      #          #  #   #    #           #"
            println "#      #######    #   #  #    #           #"
            println "#            #    #    # #    #           #"
            println "#      ######     #     ##     ######     #"
            println "#                                         #"
            println "#      Copyright (c) 2016 Aaron Jo.       #"
            println "#                                         #"
            println "#          mcharima5@gmail.com            #"
            println "#                                         #"
            println "###########################################"
            println "\n"

            variant.outputs.all { output ->
                println "============================================================"
                println "project id: $variant.applicationId"
                println "project version : $variant.versionName"
                println "project revision : $variant.versionCode"
                println "build name: ${variant.name}"
                println "build type: ${variant.buildType.name}"
                println "output dir : " + variant.packageApplicationProvider.get().outputDirectory
                println "output file : $output.outputFileName"
                println "============================================================"
                println "\n"
            }
        }
    }
}
